<div class="bg-grey col-6 border" @onclick="@(async (arg)=>{await SelectedProductChanged(arg,Product.Name);})">
    <h4 class="text-secondary">Product - @Product.Id</h4>
    <input type="checkbox" @onchange="FavoriteUpdated" value="Add to favorite"/>
    <br />
    Name : @Product.Name
    Price : @Product.Price<br />
    @if(FirstFragment!=null && SecondFragment!=null)
    {
        <p>RF From Parent: @FirstFragment - @SecondFragment</p>
        <br />
    }
    Show Properties : <input type="checkbox" @bind-value="@Product.IsActive" checked="@(Product.IsActive ? "checked" : null)" /><br />
    @if (Product.IsActive)
    {
        @foreach (var item in Product.ProductProperties)
        {
            <p>@item.Key - @item.Value</p>
            <br />
        }
    }
    <_EditeDeleteButton IsActive="@Product.IsActive" />
</div>
@code {
    [Parameter]
    public Demo_Product Product { get; set; }

    [Parameter]
    public EventCallback<bool> OnFavoriteCountUpdate { get; set; }
    [Parameter]
    public RenderFragment FirstFragment { get; set; }
    [Parameter]
    public RenderFragment SecondFragment { get; set; }

    [Parameter]
    public EventCallback<string> OnSelectedProductChanged { get; set; }

    public async Task FavoriteUpdated(ChangeEventArgs e)
    {
        OnFavoriteCountUpdate.InvokeAsync((bool)e.Value);
    }

    public async Task SelectedProductChanged(MouseEventArgs e, string name)
    {
        OnSelectedProductChanged.InvokeAsync(name);
    }

}
